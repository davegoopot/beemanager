name: Deploy to Local Server

on:
  push:
    branches: [ main, master ]
  workflow_run:
    workflows: ["Tests", "Django Web Tests"]
    types:
      - completed

jobs:
  # Run tests first to ensure code quality
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.13]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install UV
      run: |
        python -m pip install --upgrade pip
        pip install uv
    
    - name: Run tests
      run: |
        uv run pytest

  web-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: 3.13
    
    - name: Install UV
      run: |
        python -m pip install --upgrade pip
        pip install uv
    
    - name: Run Django migrations (check)
      run: |
        uv run python manage.py check --deploy
    
    - name: Run web tests  
      run: |
        uv run pytest web_tests/
    
    - name: Test Django server startup
      run: |
        timeout 10s uv run python manage.py runserver --noreload || true
        echo "Django server startup test completed"
    
    - name: Run Django system checks
      run: |
        uv run python manage.py check

  # Build and deploy only if tests pass
  deploy:
    runs-on: ubuntu-latest
    needs: [test, web-test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: 3.13
    
    - name: Install UV
      run: |
        python -m pip install --upgrade pip
        pip install uv
    
    - name: Build project
      run: |
        uv build
    
    - name: Prepare deployment files
      run: |
        # Create deployment directory structure
        mkdir -p deployment
        cp -r dist/ deployment/
        cp manage.py deployment/
        cp serve.bash deployment/
        cp -r core/ deployment/
        cp -r django_project/ deployment/
        cp pyproject.toml deployment/
        cp uv.lock deployment/ 2>/dev/null || echo "uv.lock not found, skipping"
        
        # Create deployment script
        cat > deployment/deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "Starting deployment..."
        
        # Install UV if not present
        if ! command -v uv &> /dev/null; then
            echo "Installing UV..."
            pip install uv
        fi
        
        # Install the built package
        echo "Installing beemanager package..."
        if ls dist/*.whl 1> /dev/null 2>&1; then
            uv pip install dist/*.whl --force-reinstall
        elif ls dist/*.tar.gz 1> /dev/null 2>&1; then
            uv pip install dist/*.tar.gz --force-reinstall
        else
            echo "No distribution files found"
            exit 1
        fi
        
        # Run Django migrations
        echo "Running Django migrations..."
        uv run python manage.py migrate --noinput
        
        # Collect static files (if needed)
        echo "Collecting static files..."
        uv run python manage.py collectstatic --noinput --clear || echo "Static files collection skipped"
        
        # Restart services (customize based on your server setup)
        echo "Deployment completed successfully!"
        echo "You may need to restart your web server manually"
        EOF
        
        chmod +x deployment/deploy.sh
    
    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
    
    - name: Deploy to server
      run: |
        # Copy deployment files to server
        scp -r deployment/ ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:${{ secrets.DEPLOY_PATH }}/
        
        # Execute deployment script on server
        ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "cd ${{ secrets.DEPLOY_PATH }}/deployment && ./deploy.sh"
    
    - name: Cleanup SSH key
      if: always()
      run: |
        rm -f ~/.ssh/id_rsa
    
    - name: Deploy success notification
      run: |
        echo "‚úÖ Deployment completed successfully!"
        echo "üêù Beemanager has been deployed to the local server"